name: Build
on:
  workflow_dispatch:
  release:
    types:
      - published
  # push:
  #   branches:
  #     - main

# cf. https://github.com/oxigraph/oxigraph/blob/main/.github/workflows/artifacts.yml
jobs:

  binary_linux:
    name: Build binaries for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update && rustup target add aarch64-unknown-linux-gnu

      - run: |
          sudo apt update && sudo apt install -y g++-aarch64-linux-gnu
          echo -e "\n\n[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config.toml

      - uses: Swatinem/rust-cache@v2

      - run: cargo build --release
        working-directory: ./lib

      - run: cargo build --release --target aarch64-unknown-linux-gnu
        working-directory: ./lib
        env:
          BINDGEN_EXTRA_CLANG_ARGS: --sysroot /usr/aarch64-linux-gnu

      - uses: actions/upload-artifact@v3
        with:
          name: nanopub_x86_64_linux_gnu
          path: target/release/nanopub
      - uses: actions/upload-artifact@v3
        with:
          name: nanopub_aarch64_linux_gnu
          path: target/aarch64-unknown-linux-gnu/release/nanopub

      - if: github.event_name == 'release'
        run: |
          mv target/release/nanopub nanopub_${{ github.event.release.tag_name }}_x86_64_linux_gnu
          mv target/aarch64-unknown-linux-gnu/release/nanopub nanopub_${{ github.event.release.tag_name }}_aarch64_linux_gnu

      - uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: |
            nanopub_${{ github.event.release.tag_name }}_x86_64_linux_gnu
            nanopub_${{ github.event.release.tag_name }}_aarch64_linux_gnu


  binary_mac:
    name: Build binaries for MacOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update && rustup target add aarch64-apple-darwin

      - run: |
          sudo apt update && sudo apt install -y g++-aarch64-linux-gnu
          echo -e "\n\n[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config.toml

      - uses: Swatinem/rust-cache@v2

      - run: cargo build --release
        working-directory: ./lib

      - run: cargo build --release --target aarch64-apple-darwin
        working-directory: ./lib

      - uses: actions/upload-artifact@v3
        with:
          name: nanopub_x86_64_apple
          path: target/release/nanopub
      - uses: actions/upload-artifact@v3
        with:
          name: nanopub_aarch64_apple
          path: target/aarch64-apple-darwin/release/nanopub

      - if: github.event_name == 'release'
        run: |
          mv target/release/nanopub nanopub_${{ github.event.release.tag_name }}_x86_64_apple
          mv target/aarch64-apple-darwin/release/nanopub nanopub_${{ github.event.release.tag_name }}_aarch64_apple

      - uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: |
            nanopub_${{ github.event.release.tag_name }}_x86_64_apple
            nanopub_${{ github.event.release.tag_name }}_aarch64_apple


  binary_windows:
    name: Build binaries for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2

      - run: cargo build --release
        working-directory: ./lib


      - uses: actions/upload-artifact@v3
        with:
          name: nanopub_x86_64_windows_msvc
          path: target/release/nanopub.exe

      - if: github.event_name == 'release'
        run: |
          mv target/release/nanopub.exe nanopub_${{ github.event.release.tag_name }}_x86_64_windows_msvc.exe

      - uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: |
            nanopub_${{ github.event.release.tag_name }}_x86_64_windows_msvc.exe


  npm_tarball:
    name: Build npm package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodule: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2

      - name: Install wasm-pack for JS
        run: cargo install wasm-pack || true

      - name: Setup node for JS
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: "./js/package.json"

      - name: Build npm package
        run: npm run pack
        working-directory: ./js

      - name: Upload tarball
        uses: actions/upload-artifact@v3
        with:
          name: nanopub_rs_npm
          path: ./js/pkg/*.tgz

      # - run: npm run release
      #  working-directory: ./js/pkg
      #  env:
      #    NODE_AUTH_TOKE: ${{ secrets.NPM_TOKEN }}
      #  if: github.event_name == 'release'


  # publish_crates:
  #   if: github.event_name == 'release'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - run: rustup update
  #     - run: cargo login $CRATES_IO_TOKEN
  #       env:
  #         CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
  #     - run: cargo publish
  #       working-directory: ./lib
  #       continue-on-error: true
