[changelog]
header = """
# 📜 Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# Template for the changelog: https://keats.github.io/tera/docs
body = """
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/tree/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first | trim }} - ([{{ commit.id | truncate(length=7, end="") }}](<REPO>/commit/{{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
trim = true
footer = """
<!-- generated by git-cliff -->
"""
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/vemonet/nanopub-rs" },
]
[git]
# https://www.conventionalcommits.org
# Example breaking change commit in python API: `feat(python)!: changed everything`
conventional_commits = true
filter_unconventional = false
split_commits = false
commit_parsers = [
  { message = "^feat", group = "⛰️ Features" },
  { message = "^fix", group = "🐛 Bug Fixes" },
  { message = "^doc", group = "📚 Documentation" },
  { message = "^perf|DataOriented", group = "⚡ Performance" },
  { message = "^refactor", group = "🚜 Refactor" },
  { message = "^style|Formatting", group = "🎨 Styling" },
  { message = "^test", group = "🧪 Testing" },
  { message = "^ci", group = "⚙️ Continuous Integration" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore", group = "🛠️ Miscellaneous Tasks" },
  { body = ".*security", group = "🛡️ Security" },
  { message = "^revert", group = "◀️ Revert" },
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
filter_commits = false
tag_pattern = "v?[0-9].*"

# Sort the tags topologically
topo_order = false
sort_commits = "oldest"

# skip_tags = "0.1.0-beta.1"    # regex for skipping tags
# ignore_tags = ""  # regex for ignoring tags
# limit_commits = 42    # limit the number of commits included in the changelog.
# regex for preprocessing the commit messages:
# commit_preprocessors = [
#   # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
# ]
